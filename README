AdaBoost-LIBLINEAR
==================
The package includes:
- Implementation of AdaBoost with decision stump as base learner.
- Implementation of AdaBoost with various linear models, which are
  supported in LIBLINAER-1.94, as base learners. It uses `liblinear-weights-1.94`
  which is available at http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/#weights_for_data_instances.

Compilation/Installation
----------------------------------------------------------------------------------------
On UNIX/LINUX/MAC with gcc/g++, type the command `make clean all`.


AdaBoost-Stump
----------------------------------------------------------------------------------------
We implement AdaBoost with decision stump as base learner.

[Training]
$ ./train-adaboost-stump 
Usage: train-adaboost-stump [options] train_file_name [model_file_name]
options: (currently, it only supports binary classification)
	-i iter: maximum number of iterations (default sqrt(l)), where l denotes #training instances
	-d dimension: dimensions of random subspace; (default n, deterministic mode), where n denotes #features
	-t test_file_name: testing data after training
	-v n: n-fold cross validation mode
	-q: quiet mode

Note:
The option `-d followed by an integer` is used to specify the dimensions of random
subspace. At each training iteration, it only randomly selects d dimentions to
train the optimal decision stump as a base learner.

[Prediction]
$ ./predict-adaboost-stump 
Usage: predict-adaboost-stump [options] test_file model_file output_file
(No options are available for now.)


AdaBoost-Linear
----------------------------------------------------------------------------------------
[Training]
$ ./train-adaboost-linear
Usage: train-adaboost-linear [options] training_set_file [model_file]
options: (currently, it only supports binary classification)
-i iter: maximum number of iterations (default sqrt(l)), where l denotes #training instances
-s type : set type of solver (default 1)
  for multi-class classification
         0 -- L2-regularized logistic regression (primal)
         1 -- L2-regularized L2-loss support vector classification (dual)
         2 -- L2-regularized L2-loss support vector classification (primal)
         3 -- L2-regularized L1-loss support vector classification (dual)
         4 -- support vector classification by Crammer and Singer
         5 -- L1-regularized L2-loss support vector classification
         6 -- L1-regularized logistic regression
         7 -- L2-regularized logistic regression (dual)
  for regression
        11 -- L2-regularized L2-loss support vector regression (primal)
        12 -- L2-regularized L2-loss support vector regression (dual)
        13 -- L2-regularized L1-loss support vector regression (dual)
-c cost : set the parameter C (default 1)
-p epsilon : set the epsilon in loss function of SVR (default 0.1)
-e epsilon : set tolerance of termination criterion
        -s 0 and 2
                |f'(w)|_2 <= eps*min(pos,neg)/l*|f'(w0)|_2,
                where f is the primal function and pos/neg are # of
                positive/negative data (default 0.01)
        -s 11
                |f'(w)|_2 <= eps*|f'(w0)|_2 (default 0.001)
        -s 1, 3, 4, and 7
                Dual maximal violation <= eps; similar to libsvm (default 0.1)
        -s 5 and 6
                |f'(w)|_1 <= eps*min(pos,neg)/l*|f'(w0)|_1,
                where f is the primal function (default 0.01)
        -s 12 and 13
                |f'(alpha)|_1 <= eps |f'(alpha0)|,
                where f is the dual function (default 0.1)
-B bias : if bias >= 0, instance x becomes [x; bias]; if < 0, no bias term added (default -1)
-wi weight: weights adjust the parameter C of different classes (see README for details)
-v n: n-fold cross validation mode
-q : quiet mode (no outputs)
-W instace_weight_file: initialize instance weights, (default 1.0/[#training instances])

[Prediction]
$ ./predict-adaboost-linear 
Usage: predict-adaboost-linear [options] test_file model_file output_file
(No options are available for now.)

Note:
- The final model is saved in the folder named [model_file] with the following structure:
= Folder [model_file]
	-- File alpha: weights of linear base learners
	-- File [zero-based index]: linear base model
		(outputted by save_model(.) in LIBLINEAR)


Feedback
----------------------------------------------------------------------------------------
You can always contact Guo-Xun Yuan <eaudex@gmail.com> with any questions.

